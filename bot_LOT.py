from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP
from telebot.types import InputMediaPhoto

import json
import random
import telebot

bot = telebot.TeleBot('5790530956:AAHR5gW3d7Z7K1NWj81Ycej8zf4rHYUYhr4')



list_id_lots = []

lot = {}


lst_id_lot = []

def gen_id(lst):
    point = 0
    while point == 0:
        id = random.randint(1,99999)
        if id not in lst:
            lst.append(id)
            point +=1
            return id




'''
lot = {
    "id_admin": "id", +
    "id_lot": "id_lot", +
    "mas_photos": id_photo1, +
    "description": "–æ–ø–∏—Å–∞–Ω–∏–µ", +
    "city" : "–≥–æ—Ä–æ–¥", +
    "delivery": "—É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏", +
    "cost": "—Ü–µ–Ω–∞", +
    "start_time": "—Å—Ç–∞—Ä—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", -
    "finish_time": "–∫–æ–Ω–µ—Ü –∞—É–∫—Ü–∏–æ–Ω–∞" -
}
'''


def add_time(message):
    calendar, step = DetailedTelegramCalendar().build()

    bot.send_message(message.chat.id, f"Select {LSTEP[step]}", reply_markup=calendar)

def add_cost(message):
    if message.content_type == "text" and len(message.text) > 1:
        try:
            cost = int(message.text)
            lot["cost"] = cost
            id_lots = gen_id(list_id_lots)
            lot["id_lot"] = id_lots
            with open('new_lots/'f'{id_lots}.json', 'w', encoding='utf-8') as f:
                json.dump(lot, f, ensure_ascii=False, indent=4)

            bot.send_message(message.from_user.id, "–ü–æ–∫–∞—á—Ç–æ –ª–æ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")
        except:
            msg = bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            bot.register_next_step_handler(msg, add_cost)  

def add_delivery(message):
    if message.content_type == "text" and len(message.text) > 1:
        lot["delivery"] = message.text
        msg = bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ü–µ–Ω—É –ª–æ—Ç–∞ –≤ —Ä—É–±–ª—è—Ö (100/ 200/ 5000)")
        bot.register_next_step_handler(msg, add_cost)
    else:
        msg = bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        bot.register_next_step_handler(msg, add_delivery)


def add_city(message):
    if message.content_type == "text" and len(message.text) > 1:
        lot["city"] = message.text
        msg = bot.send_message(message.from_user.id, "–£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏? (–ü–æ—á—Ç–∞ /–°–∞–º–æ–≤—ã–≤–æ–∑ /–ö—É—Ä—å–µ—Ä)")
        bot.register_next_step_handler(msg, add_delivery)
    else:
        msg = bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        bot.register_next_step_handler(msg, add_city)   


# len(message.text) <= 1 or 

def add_description(message):
    print(message.content_type)
    if message.content_type == "text" and len(message.text) > 1:
        lot["description"] = message.text
        msg = bot.send_message(message.from_user.id, " –û—Ç–ª–∏—á—Ç–æ! –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ (–ì–æ—Ä–æ–¥)")
        bot.register_next_step_handler(msg, add_city)
    else:
        msg = bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        bot.register_next_step_handler(msg, add_description)
    

def add_photo(message):
    if "id_admin" not in lot:
        bot.send_message(message.from_user.id, " –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ—Ç, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É '/add_lot'")

    elif message.content_type !="photo" :
        msg = bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Å–µ—Ç–∞–∫–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É ")
        bot.register_next_step_handler(msg, add_photo)

    elif  message.content_type =="photo":
        lot["mas_photos"] = message.photo[-1].file_id
        msg = bot.send_message(message.from_user.id, "–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ ")
        bot.register_next_step_handler(msg, add_description)


@bot.message_handler(content_types= ["text"])
def any_text(message):

    if message.text == '/start':
        bot.send_message(message.from_user.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ‚úåüèª\n\n–°–∫–æ—Ä–æ —è –Ω–∞—á–Ω—É —Ä–∞–±–æ—Ç–∞—Ç—å')
        
    elif message.text == "":
        bot.send_message(message.from_user.id, '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start')

    elif message.text == '/add_lot':
        # —Å–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∞ –ê–¥–º–∏–Ω–∞
        lot["id_admin"] = message.from_user.id
        msg = bot.send_message(message.from_user.id, "–î–ª—è –Ω–∞—á–∞–ª–ª–∞ –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–µ –º–µ–Ω–µ —Ñ–æ—Ç–æ (–Ω–µ –±–æ–ª–µ–µ 8—à—Ç.)")
        bot.register_next_step_handler(msg, add_photo)
            

        
    

   


@bot.callback_query_handler(func=lambda call: True)
def answer(call):
    result, key, step = DetailedTelegramCalendar().process(call.data)
    if not result and key:
        bot.edit_message_text(f"Select {LSTEP[step]}",
                              call.message.chat.id,
                              call.message.message_id,
                              reply_markup=key)
    elif result:

        bot.edit_message_text(f"You selected {result}",
                              call.message.chat.id,
                              call.message.message_id)




print('Ready')
bot.infinity_polling(skip_pending=True)